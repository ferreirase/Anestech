{"ast":null,"code":"var _jsxFileName = \"/home/ferreira/Desktop/Projects/anestech/frontend/src/pages/CreateTask/index.tsx\";\nimport React, { useRef, useCallback } from 'react';\nimport * as Yup from 'yup';\nimport { FiClipboard, FiUser } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport ActionsButtons from './actionsButtons';\nimport { Header, AnimationContainer } from './styles';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport Input from '../../components/Input';\nimport { useToast } from '../../hooks/toast';\nimport Button from '../../components/Button';\n\nconst CreateTask = () => {\n  const formRef = useRef(null);\n  const {\n    addToast\n  } = useToast();\n  const handleSubmit = useCallback(async data => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        description: Yup.string().required('Descrição obrigatória'),\n        responsible: Yup.string().required('Responsável obrigatório')\n      });\n      await schema.validate(data, {\n        abortEarly: false // retorna todos os erros de uma vez só\n\n      });\n    } catch (error) {\n      if (error instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(error);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      } // disparar um toast\n\n\n      addToast({\n        type: 'error',\n        title: 'Erro na autenticação',\n        description: 'Ocorreu um erro ao fazer login. Cheque as credenciais.'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"My Tasks\"), /*#__PURE__*/React.createElement(ActionsButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(AnimationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Criar nova tarefa\"), /*#__PURE__*/React.createElement(Input, {\n    icon: FiClipboard,\n    name: \"description\",\n    placeholder: \"Descri\\xE7\\xE3o\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    icon: FiUser,\n    name: \"responsible\",\n    placeholder: \"Respons\\xE1vel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      position: 'relative',\n      top: '20px'\n    },\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Criar\"))));\n};\n\nexport default CreateTask;","map":{"version":3,"sources":["/home/ferreira/Desktop/Projects/anestech/frontend/src/pages/CreateTask/index.tsx"],"names":["React","useRef","useCallback","Yup","FiClipboard","FiUser","Form","ActionsButtons","Header","AnimationContainer","getValidationErrors","Input","useToast","Button","CreateTask","formRef","addToast","handleSubmit","data","current","setErrors","schema","object","shape","description","string","required","responsible","validate","abortEarly","error","ValidationError","errors","type","title","position","top"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from 'react';\nimport * as Yup from 'yup';\nimport { FiClipboard, FiUser, FiLock } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport ActionsButtons from './actionsButtons';\nimport { Header, AnimationContainer } from './styles';\n\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport Input from '../../components/Input';\nimport { useToast } from '../../hooks/toast';\nimport Button from '../../components/Button';\n\ninterface SignInFormData {\n  email: string;\n  password: string;\n}\n\nconst CreateTask: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToast();\n\n  const handleSubmit = useCallback(async (data: SignInFormData) => {\n    try {\n      formRef.current?.setErrors({});\n      const schema = Yup.object().shape({\n        description: Yup.string().required('Descrição obrigatória'),\n        responsible: Yup.string().required('Responsável obrigatório'),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false, // retorna todos os erros de uma vez só\n      });\n    } catch (error) {\n      if (error instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(error);\n        formRef.current?.setErrors(errors);\n\n        return;\n      }\n\n      // disparar um toast\n      addToast({\n        type: 'error',\n        title: 'Erro na autenticação',\n        description: 'Ocorreu um erro ao fazer login. Cheque as credenciais.',\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <Header>\n        <h2>My Tasks</h2>\n        <ActionsButtons />\n      </Header>\n      <AnimationContainer>\n        <Form ref={formRef} autoComplete=\"off\" onSubmit={handleSubmit}>\n          <h1>Criar nova tarefa</h1>\n\n          <Input\n            icon={FiClipboard}\n            name=\"description\"\n            placeholder=\"Descrição\"\n          />\n\n          <Input icon={FiUser} name=\"responsible\" placeholder=\"Responsável\" />\n\n          <Button style={{ position: 'relative', top: '20px' }} type=\"submit\">\n            Criar\n          </Button>\n        </Form>\n      </AnimationContainer>\n    </>\n  );\n};\n\nexport default CreateTask;\n"]},"metadata":{},"sourceType":"module"}