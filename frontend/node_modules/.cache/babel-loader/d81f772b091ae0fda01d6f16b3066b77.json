{"ast":null,"code":"var _jsxFileName = \"/home/ferreira/Desktop/Projects/anestech/frontend/src/pages/Dashboard/index.tsx\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/* eslint-disable no-nested-ternary */\n\n/* eslint-disable @typescript-eslint/camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Header, Message } from './styles';\nimport Accordion from '../../components/Accordion';\nimport ActionsButtons from './actionsButtons';\nimport Loader from '../../components/Loader';\nimport api from '../../services/apiClient';\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [tasks, setTasks] = useState([]);\n  const [message, setMessage] = useState('');\n  const token = localStorage.getItem('@GoBarber:token');\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const history = useHistory();\n\n  const getTasks = async () => {\n    try {\n      const response = await api.get('tasks', config);\n\n      if (response.data.length === 0) {\n        setMessage('nenhuma tarefa registrada');\n      }\n\n      setTasks(response.data);\n      setLoading(false);\n    } catch (error) {\n      setTasks([]);\n      setLoading(false);\n      setMessage('Erro na conexão! Tente novamente em minutos.');\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      getTasks();\n    }, 2000);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"My Tasks\"), /*#__PURE__*/React.createElement(ActionsButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }\n  }) : message ? /*#__PURE__*/React.createElement(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 41\n    }\n  }, message) : null, tasks.map(task => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    const date = new Date(task.created_at); // 2020-12-31T03:00:00.000Z\n    // const finishedDate = new Date(task.finished_at); // 2020-12-31T03:00:00.000Z\n\n    return /*#__PURE__*/React.createElement(Accordion, {\n      responsible: task.responsible.name,\n      key: task.id,\n      created_at: `${date.toLocaleDateString('pt-br', options)}, às ${date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()}:${date.getMinutes()}`,\n      description: task.description,\n      status: task.finished_at === null ? 'Aberta' : 'Finalizada',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/ferreira/Desktop/Projects/anestech/frontend/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","useHistory","Header","Message","Accordion","ActionsButtons","Loader","api","Dashboard","loading","setLoading","tasks","setTasks","message","setMessage","token","localStorage","getItem","config","headers","Authorization","history","getTasks","response","get","data","length","error","setTimeout","map","task","options","year","month","day","date","Date","created_at","responsible","name","id","toLocaleDateString","getHours","getMinutes","description","finished_at"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable @typescript-eslint/camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Header, Message } from './styles';\nimport Accordion from '../../components/Accordion';\nimport ActionsButtons from './actionsButtons';\nimport CreateTaskButton from './createTaskButton';\nimport Loader from '../../components/Loader';\nimport api from '../../services/apiClient';\n\ninterface ResponsibleModel {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface TaskModel {\n  id: string;\n  created_at: Date | string;\n  description: string;\n  finished_at: Date | string;\n  responsible: ResponsibleModel;\n}\n\nconst Dashboard: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [tasks, setTasks] = useState([]);\n  const [message, setMessage] = useState('');\n  const token = localStorage.getItem('@GoBarber:token');\n\n  const config = {\n    headers: { Authorization: `Bearer ${token}` },\n  };\n\n  const history = useHistory();\n\n  const getTasks = async () => {\n    try {\n      const response = await api.get('tasks', config);\n\n      if (response.data.length === 0) {\n        setMessage('nenhuma tarefa registrada');\n      }\n\n      setTasks(response.data);\n      setLoading(false);\n    } catch (error) {\n      setTasks([]);\n      setLoading(false);\n      setMessage('Erro na conexão! Tente novamente em minutos.');\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      getTasks();\n    }, 2000);\n  }, []);\n  return (\n    <>\n      <Header>\n        <h2>My Tasks</h2>\n        <ActionsButtons />\n      </Header>\n      {loading ? <Loader /> : message ? <Message>{message}</Message> : null}\n      {tasks.map((task: TaskModel) => {\n        const options = { year: 'numeric', month: 'numeric', day: 'numeric' };\n        const date = new Date(task.created_at); // 2020-12-31T03:00:00.000Z\n        // const finishedDate = new Date(task.finished_at); // 2020-12-31T03:00:00.000Z\n        return (\n          <Accordion\n            responsible={task.responsible.name}\n            key={task.id}\n            created_at={`${date.toLocaleDateString('pt-br', options)}, às ${\n              date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\n            }:${date.getMinutes()}`}\n            description={task.description}\n            status={task.finished_at === null ? 'Aberta' : 'Finalizada'}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}